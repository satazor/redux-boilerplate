#!/usr/bin/env node

'use strict';

const yargs = require('yargs');
const chalk = require('chalk');
const eslint = require('eslint');
const stylelint = require('stylelint');
const reporter = require('./common/reporter');

const projectDir = __dirname + '/..';

// ---------------------------------------------------------
// CLI definition
// ---------------------------------------------------------

const argv = yargs
.strict()
.wrap(Math.min(120, yargs.terminalWidth()))
.usage('Usage: ./$0 [options]')
.demand(0, 0)
.option('lint-output', {
    alias: 'l',
    type: 'boolean',
    describe: 'Show the lint output',
    default: true,
})
.option('help', {
    alias: 'h',
    type: 'boolean',
    describe: 'Show the help',
})
.argv;

if (argv.help) {
    yargs.showHelp('log');
    process.exit(0);
}

// ---------------------------------------------------------
// Functions
// ---------------------------------------------------------

function runEslint(files) {
    const cli = new eslint.CLIEngine();
    const report = cli.executeOnFiles(files);

    if (argv.lintOutput) {
        const formatter = cli.getFormatter();
        const output = formatter(report.results).trim();

        process.stdout.write(output ? output + '\n' : '');
    }

    if (report.errorCount) {
        reporter.fail(new Error('eslint reported ' + report.errorCount + ' error(s)'));
    } else if (report.warningCount) {
        process.stdout.write('Linting succeeded but with \
' + chalk.yellow(report.warningCount + ' warning(s)') + '\n');
    } else {
        process.stdout.write('Linting succeeded\n');
    }
}

function runStylelint(files) {
    return stylelint.lint({
        files,
        formatter: 'string',
    })
    .then((result) => {
        const output = result.output.trim();

        argv.lintOutput && process.stdout.write(output ? output + '\n\n' : '');

        if (result.errored) {
            reporter.fail(new Error('stylelint result contains errors'));
        } else if (output) {
            process.stdout.write('Linting succeeded but with ' + chalk.yellow('warning(s)') + '\n');
        } else {
            process.stdout.write('Linting succeeded\n');
        }
    });
}

// ---------------------------------------------------------
// Steps
// ---------------------------------------------------------

// Step - Run es-lint to validate JS source code
reporter.step('Running es-lint in src/**/*.js and config/**/*.js');
runEslint([projectDir + '/src/**/*.js', projectDir + '/config/**/*.js']);

// Step - Run es-lint to validate scripts JS code
reporter.step('Running es-lint in scripts/**/*.js');
runEslint([projectDir + '/scripts/**/*.js']);

// Step - Run stylelint to validate CSS code
reporter.step('Running stylelint in src/**/*.css');
runStylelint([projectDir + '/src/**/*.css']);
