#!/usr/bin/env node

'use strict';

const fs = require('fs');
const cp = require('child_process');
const errcode = require('err-code');
const rimraf = require('rimraf');
const yargs = require('yargs');
const planify = require('planify');

const projectDir = __dirname + '/..';

// ---------------------------------------------------------
// CLI definition
// ---------------------------------------------------------

const argv = yargs
.strict()
.wrap(Math.min(120, yargs.terminalWidth()))
.usage('Usage: ./$0 [options]')
.demand(0, 0)
.option('force', {
    alias: 'f',
    type: 'boolean',
    describe: 'Forces the re-initialization of the project',
})
.option('reporter', {
    alias: ['r', 'R'],
    type: 'string',
    describe: 'Any of the planify\'s reporters',
})
.option('help', {
    alias: 'h',
    type: 'boolean',
    describe: 'Show the help',
})
.argv;

if (argv.help) {
    yargs.showHelp('log');
    process.exit(0);
}

// ---------------------------------------------------------
// Functions
// ---------------------------------------------------------

function checkAlreadyInitialized() {
    let inited = true;

    try {
        fs.statSync(projectDir + '/config/parameters.json');
    } catch (err) {
        if (err.code === 'ENOENT') {
            inited = false;
        } else {
            throw err;
        }
    }

    if (inited && !argv.force) {
        throw errcode('Project is already initialized', { detail: 'Run with --force to re-initialize the project' });
    }
}

function copyParameters() {
    const contents = fs.readFileSync(projectDir + '/config/parameters.json.dist');

    fs.writeFileSync(projectDir + '/config/parameters.json', contents);
}

function installPreCommitHook() {
    const contents = '#!/bin/sh\n\nnpm run pre-commit';

    fs.writeFileSync(projectDir + '/.git/hooks/pre-commit', contents);
    fs.chmodSync(projectDir + '/.git/hooks/pre-commit', 0o755);
}

function installDependencies() {
    process.stdout.write('Removing node_modules..\n');
    rimraf.sync(projectDir + '/node_modules');

    process.stdout.write('Running npm install..\n');

    cp.execSync('npm install', {
        cwd: projectDir,
        stdio: 'inherit',
    });
}

// ---------------------------------------------------------
// Steps
// ---------------------------------------------------------

planify({ exit: true, reporter: argv.reporter })
// Check if project is already initialized
.step('Check project status', () => checkAlreadyInitialized())
// Copy dist parameters
.step('Copy parameters.json.dist to parameters.json', () => copyParameters())
// Install pre-commit hook into .git folder
.step('Install pre-commit hook', () => installPreCommitHook())
// Fresh install dependencies
.step('Installing dependencies', () => installDependencies())
.run();
